name: Deploy to GitHub Pages

on:
  workflow_dispatch:
    inputs:
      product_data_run_id:
        description: 'Run ID of the product data fetch workflow'
        required: false
        type: string
      broken_link_run_id:
        description: 'Run ID of the broken link check workflow'
        required: false
        type: string
      trigger_source:
        description: 'Source workflow that triggered this deployment'
        required: false
        default: 'manual'
        type: string

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # 30 minute timeout for deployment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas jinja2

      - name: Collect artifacts from multiple workflows
        id: collect-artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let artifactsCollected = {
              brokenLinkCsvs: false,
              productExportCsv: false
            };

            console.log('Collecting artifacts from multiple workflow runs...');
            console.log(`Product data run ID: ${{ inputs.product_data_run_id }}`);
            console.log(`Broken link run ID: ${{ inputs.broken_link_run_id }}`);

            // Function to download artifacts from a specific run
            async function downloadArtifactsFromRun(runId, artifactName, outputFile) {
              try {
                const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  run_id: runId
                });

                const artifact = artifacts.data.artifacts.find(
                  a => a.name === artifactName && !a.expired
                );

                if (artifact) {
                  const download = await github.rest.actions.downloadArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id,
                    archive_format: 'zip'
                  });

                  fs.writeFileSync(outputFile, Buffer.from(download.data));
                  console.log(`Downloaded ${artifactName} from run ${runId}`);
                  return true;
                }
                return false;
              } catch (error) {
                console.log(`Error downloading ${artifactName} from run ${runId}: ${error.message}`);
                return false;
              }
            }

            // Function to find recent successful runs
            async function findRecentSuccessfulRuns(workflowFile) {
              const runs = await github.rest.actions.listWorkflowRuns({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflowFile,
                status: 'completed',
                conclusion: 'success',
                per_page: 10
              });
              return runs.data.workflow_runs;
            }

            // Try to download broken link CSVs
            let brokenLinkRunId = '${{ inputs.broken_link_run_id }}';
            if (brokenLinkRunId) {
              artifactsCollected.brokenLinkCsvs = await downloadArtifactsFromRun(
                brokenLinkRunId, 'broken-link-csvs', 'broken-link-csvs.zip'
              );
            }

            if (!artifactsCollected.brokenLinkCsvs) {
              console.log('Searching for recent broken link check runs...');
              const brokenLinkRuns = await findRecentSuccessfulRuns('broken-link-check.yml');
              for (const run of brokenLinkRuns) {
                artifactsCollected.brokenLinkCsvs = await downloadArtifactsFromRun(
                  run.id, 'broken-link-csvs', 'broken-link-csvs.zip'
                );
                if (artifactsCollected.brokenLinkCsvs) break;
              }
            }

            // Try to download product export CSV
            let productDataRunId = '${{ inputs.product_data_run_id }}';
            if (productDataRunId) {
              artifactsCollected.productExportCsv = await downloadArtifactsFromRun(
                productDataRunId, 'product-export-csv', 'product-export-csv.zip'
              );
            }

            if (!artifactsCollected.productExportCsv) {
              console.log('Searching for recent product data fetch runs...');
              const productDataRuns = await findRecentSuccessfulRuns('product-data-fetch.yml');
              for (const run of productDataRuns) {
                artifactsCollected.productExportCsv = await downloadArtifactsFromRun(
                  run.id, 'product-export-csv', 'product-export-csv.zip'
                );
                if (artifactsCollected.productExportCsv) break;
              }
            }

            console.log('Artifact collection summary:');
            console.log(`- Broken link CSVs: ${artifactsCollected.brokenLinkCsvs}`);
            console.log(`- Product export CSV: ${artifactsCollected.productExportCsv}`);

            core.setOutput('broken_link_csvs', artifactsCollected.brokenLinkCsvs);
            core.setOutput('product_export_csv', artifactsCollected.productExportCsv);

      - name: Extract and validate CSV files
        run: |
          echo "Extracting and validating CSV files..."

          # Extract broken link CSVs
          if [ -f "broken-link-csvs.zip" ]; then
            unzip -o broken-link-csvs.zip
            echo "✓ Extracted broken link CSVs"
          else
            echo "⚠️ No broken link CSV artifacts found"
            # Create placeholder files
            echo "URL,Status,Response_Time,Error" > au_broken_links.csv
            echo "https://example.com,404,1.0,Not Found" >> au_broken_links.csv
            echo "URL,Status,Response_Time,Error" > nz_broken_links.csv
            echo "https://example.com,404,1.0,Not Found" >> nz_broken_links.csv
          fi

          # Extract product export CSV
          if [ -f "product-export-csv.zip" ]; then
            unzip -o product-export-csv.zip
            echo "✓ Extracted product export CSV"
          else
            echo "⚠️ No product export CSV artifacts found"
            # Create placeholder file
            echo "SKU,ID,DETAIL" > product_export.csv
            echo "12345678,NOT_FOUND,No product data available" >> product_export.csv
          fi

          # Validate and report on CSV files
          echo "📊 CSV File Summary:"
          for csv_file in au_broken_links.csv nz_broken_links.csv product_export_*.csv; do
            if [ -f "$csv_file" ]; then
              lines=$(wc -l < "$csv_file")
              echo "  ✓ $csv_file: $lines lines"
            else
              echo "  ✗ $csv_file: missing"
            fi
          done

          # Clean up zip files
          rm -f *.zip

      - name: Generate comprehensive HTML report with error handling
        run: |
          echo "🎨 Generating comprehensive HTML report..."

          # Validate Python environment
          python3 --version || {
            echo "❌ Python3 not available"
            exit 1
          }

          # Run HTML generation with error handling
          python3 -c "
          import pandas as pd
          import json
          from datetime import datetime
          import os

          # Read CSV files
          csv_files = {}

          # Read AU broken links
          if os.path.exists('au_broken_links.csv'):
              csv_files['au_broken_links'] = pd.read_csv('au_broken_links.csv')
          else:
              csv_files['au_broken_links'] = pd.DataFrame(columns=['URL', 'Status', 'Response_Time', 'Error'])

          # Read NZ broken links
          if os.path.exists('nz_broken_links.csv'):
              csv_files['nz_broken_links'] = pd.read_csv('nz_broken_links.csv')
          else:
              csv_files['nz_broken_links'] = pd.DataFrame(columns=['URL', 'Status', 'Response_Time', 'Error'])

          # Read product export (find the actual file)
          product_files = [f for f in os.listdir('.') if f.startswith('product_export') and f.endswith('.csv')]
          if product_files:
              csv_files['product_export'] = pd.read_csv(product_files[0])
          else:
              csv_files['product_export'] = pd.DataFrame(columns=['SKU', 'ID', 'DETAIL'])

          print(f'Loaded CSV files: {list(csv_files.keys())}')
          for name, df in csv_files.items():
              print(f'  {name}: {len(df)} rows')

          # Generate HTML report using exact template from report_generator.py
          # The template file should be available in the repository
          try:
              with open('adapted_template.html', 'r', encoding='utf-8') as f:
                  html_template = f.read()
              print("✅ Loaded adapted template from repository")
          except FileNotFoundError:
              print("❌ Template file not found, using fallback")
              # Simple fallback template
              html_template = '''<!DOCTYPE html>
              <html><head><title>Report</title></head>
              <body><h1>Report Generation Failed</h1>
              <p>Template file not found. Please check repository.</p></body></html>'''


          # Generate table rows for broken links
          def generate_link_table_rows(df, columns):
              rows = []
              for _, row in df.iterrows():
                  row_html = '<tr>'
                  for col in columns:
                      value = str(row.get(col, '')) if col in row else ''
                      # Escape HTML characters
                      value = value.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                      row_html += f'<td>{value}</td>'
                  row_html += '</tr>'
                  rows.append(row_html)
              return '\\n'.join(rows)

          # Generate table rows for products
          def generate_product_table_rows(df, columns):
              rows = []
              for i, row in df.iterrows():
                  sku = str(row.get('SKU', 'N/A'))
                  product_id = str(row.get('ID', 'N/A'))
                  detail = str(row.get('DETAIL', 'N/A'))

                  # Escape HTML characters
                  sku = sku.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                  product_id = product_id.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')
                  detail = detail.replace('&', '&amp;').replace('<', '&lt;').replace('>', '&gt;')

                  row_html = f'''<tr onclick=\"toggleProductDetails('product_{i}')\">
                      <td>{sku}</td>
                      <td>{detail}</td>
                      <td>Available</td>
                      <td><span id=\"product_{i}_toggle\" class=\"toggle-icon\">▼</span></td>
                  </tr>
                  <tr id=\"product_{i}_details\" class=\"product-details-row\" style=\"display: none;\">
                      <td colspan=\"4\">
                          <div class=\"product-details-content\">
                              <h4>Product Details (SKU: {sku})</h4>
                              <div class=\"attributes-section\">
                                  <div class=\"attributes-container\">
                                      <div class=\"attribute-item\">
                                          <span class=\"attr-name\"><strong>SKU:</strong></span>
                                          <span class=\"attr-value\">{sku}</span>
                                      </div>
                                      <div class=\"attribute-item\">
                                          <span class=\"attr-name\"><strong>Product ID:</strong></span>
                                          <span class=\"attr-value\">{product_id}</span>
                                      </div>
                                      <div class=\"attribute-item\">
                                          <span class=\"attr-name\"><strong>Description:</strong></span>
                                          <span class=\"attr-value\">{detail}</span>
                                      </div>
                                  </div>
                              </div>
                          </div>
                      </td>
                  </tr>'''
                  rows.append(row_html)
              return '\\n'.join(rows)

          # Generate content
          au_rows = generate_link_table_rows(csv_files['au_broken_links'], ['Timestamp', 'URL', 'Status', 'Response_Time', 'Error'])
          nz_rows = generate_link_table_rows(csv_files['nz_broken_links'], ['Timestamp', 'URL', 'Status', 'Response_Time', 'Error'])
          product_rows = generate_product_table_rows(csv_files['product_export'], ['SKU', 'ID', 'DETAIL'])

          # Calculate totals for summary
          au_broken_count = len(csv_files['au_broken_links'])
          nz_broken_count = len(csv_files['nz_broken_links'])

          # Estimate total links (broken links are typically 5-10% of total)
          au_total_estimate = max(au_broken_count * 10, au_broken_count + 1000)
          nz_total_estimate = max(nz_broken_count * 10, nz_broken_count + 500)

          au_valid_count = au_total_estimate - au_broken_count
          nz_valid_count = nz_total_estimate - nz_broken_count

          # Fill template
          html_content = html_template.format(
              au_count=au_broken_count,
              nz_count=nz_broken_count,
              au_total_count=au_total_estimate,
              nz_total_count=nz_total_estimate,
              au_valid_count=au_valid_count,
              nz_valid_count=nz_valid_count,
              product_count=len(csv_files['product_export']),
              timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC'),
              au_table_rows=au_rows,
              nz_table_rows=nz_rows,
              product_table_rows=product_rows
          )

          # Write HTML file
          with open('index.html', 'w', encoding='utf-8') as f:
              f.write(html_content)

          print('✅ Generated comprehensive HTML report: index.html')
          "

      - name: Prepare deployment directory with validation
        run: |
          echo "📁 Preparing deployment directory..."
          mkdir -p gh-pages-deploy

          # Validate and copy HTML report
          if [ -f "index.html" ]; then
            # Validate HTML file is not empty
            if [ -s "index.html" ]; then
              cp index.html gh-pages-deploy/
              echo "✓ Copied HTML report ($(du -h index.html | cut -f1))"
            else
              echo "❌ HTML report is empty"
              exit 1
            fi
          else
            echo "❌ HTML report not found, creating fallback page..."
            cat > gh-pages-deploy/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Report Generation Failed</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
                  .error { color: #d32f2f; }
                  .info { color: #1976d2; }
              </style>
          </head>
          <body>
              <h1 class="error">⚠️ Report Generation Failed</h1>
              <p class="info">The automated report generation encountered an error.</p>
              <p>Please check the workflow logs for more details.</p>
              <p><a href="downloads.html">📥 Download available CSV files</a></p>
          </body>
          </html>
          EOF
            echo "📝 Created fallback HTML page"
          fi

          # Copy all CSV files for download
          for csv_file in *.csv; do
            if [ -f "$csv_file" ]; then
              cp "$csv_file" gh-pages-deploy/
              echo "✓ Copied $csv_file"
            fi
          done

          # Create download links page
          cat > gh-pages-deploy/downloads.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Download CSV Files</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .download-link { display: block; margin: 10px 0; padding: 10px; background: #f0f0f0; text-decoration: none; border-radius: 5px; }
                  .download-link:hover { background: #e0e0e0; }
              </style>
          </head>
          <body>
              <h1>📥 Download CSV Files</h1>
              <p>Click the links below to download the CSV files:</p>
          EOF

          for csv_file in gh-pages-deploy/*.csv; do
            if [ -f "$csv_file" ]; then
              filename=$(basename "$csv_file")
              echo "<a href=\"$filename\" class=\"download-link\" download>📄 $filename</a>" >> gh-pages-deploy/downloads.html
            fi
          done

          echo "</body></html>" >> gh-pages-deploy/downloads.html

          echo "✅ Deployment directory prepared"

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './gh-pages-deploy'

      - name: Deploy to GitHub Pages
        id: deployment
        continue-on-error: false
        uses: actions/deploy-pages@v4

      - name: Create deployment summary
        run: |
          echo "## 🚀 GitHub Pages Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger Source: ${{ inputs.trigger_source }}" >> $GITHUB_STEP_SUMMARY
          echo "- Product Data Run ID: ${{ inputs.product_data_run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- Broken Link Run ID: ${{ inputs.broken_link_run_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- Deployment Time: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Artifacts Collected:**" >> $GITHUB_STEP_SUMMARY
          echo "- Broken Link CSVs: ${{ steps.collect-artifacts.outputs.broken_link_csvs }}" >> $GITHUB_STEP_SUMMARY
          echo "- Product Export CSV: ${{ steps.collect-artifacts.outputs.product_export_csv }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Files Deployed:**" >> $GITHUB_STEP_SUMMARY

          if [ -d "gh-pages-deploy" ]; then
            for file in gh-pages-deploy/*; do
              if [ -f "$file" ]; then
                filename=$(basename "$file")
                size=$(du -h "$file" | cut -f1)
                echo "- $filename ($size)" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🌐 Live Report:** ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "**📥 Downloads:** ${{ steps.deployment.outputs.page_url }}downloads.html" >> $GITHUB_STEP_SUMMARY